{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["dataPlans","dataDo","months","HeaderUtama","className","PlanAdder","plans","setPlans","useState","textValue","setTextValue","akan","setAkan","maxIdPlans","reduce","tar","cv","id","current","Date","currentTime","getMonth","getDate","getFullYear","value","type","placeholder","onChange","event","target","for","min","max","pattern","disabled","onClick","willOn","document","getElementById","dasar","akanJadi","newPlan","plan","createdAt","handlerAdd","PlanHeader","length","Plan","alreadyDo","setAlreadyDo","maxIdDo","handlerDelete","updated","filter","console","log","adderDo","newDo","doneAt","handlerDone","PlanList","map","HeaderDo","AlreadyDo","alreadyDos","updatedDo","already","handlerDeldo","AlreadyDoList","TaskApp","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.92a51c86.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nconst dataPlans = [];\nconst dataDo = [];\nconst months = [\n  'January', 'February', 'March', 'April', 'May',\n  'June', 'July', 'Agustus', 'September', 'October', 'November', 'December']\n\nconst HeaderUtama = () =>{\n  return <div className='header-utama'>\n    <h1>PlanApps</h1>\n  </div>\n}\n\nconst PlanAdder = ({plans, setPlans}) =>{\n  const [textValue, setTextValue] = useState('');\n  const [akan, setAkan] = useState('');\n  const maxIdPlans = plans.reduce((tar, cv) => tar = tar>cv.id ? tar : cv.id, 0);\n  const current = new Date();\n  const currentTime = `${months[current.getMonth()]} ${current.getDate()}, ${current.getFullYear()}`;\n  \n  const handlerAdd = () =>{\n    const willOn = document.getElementById('waktu').value;\n    const dasar = new Date(willOn);\n    const akanJadi = `${months[dasar.getMonth()]} ${dasar.getDate()}, ${dasar.getFullYear()}`;\n    const newPlan = {\n      id: maxIdPlans + 1,\n      plan: textValue,\n      createdAt: currentTime,\n      willOn: akanJadi\n    }\n    setPlans([...plans, newPlan]);\n    setTextValue('');\n    setAkan('');\n    // console.log(currentTime);\n    // console.log('dasar')\n    // console.log(dasar);\n    // console.log(dasar.getMonth);\n  }\n  \n\n  return <div className='adder'>\n    <textarea className='txt-waktu' value={textValue} type='text' placeholder='Write your plan' onChange={event => setTextValue(event.target.value)}/>\n    <div className='waktu'>\n      <label for='waktu' className='label-waktu'>On : </label>\n      <input \n        className='inp-waktu' id='waktu' type='date'  \n        min='2020-1-31' max='2030-1-31' value={akan}\n        onChange={event => setAkan(event.target.value)} \n        pattern='\\d{4} \\d{2} \\d{Month}'\n        />\n    </div>\n    <button className='btn-waktu' disabled={(textValue==='') || (akan ==='')} onClick={() => handlerAdd()}>Add</button>\n  </div>\n}\n\nconst PlanHeader = ({plans}) =>{\n  if(plans.length > 1){\n    return <div className='header-plan'>\n      <h3> Have {plans.length} Plans</h3>\n    </div>\n  } else if(plans.length === 1){\n    return <div className='header-plan'>\n      <h3> Have {plans.length} Plan</h3>\n    </div>\n  } else{\n    return <div className='header-plan'>\n      <h3>No Plan</h3>\n    </div>\n  }\n}\n\nconst Plan = ({createdAt, willOn,plan, id, plans, setPlans, alreadyDo, setAlreadyDo}) =>{\n  const maxIdDo = alreadyDo.reduce((tar, cv) => tar = tar>cv.id ? tar : cv.id, 0);\n  const current = new Date();\n  const currentTime = `${months[current.getMonth()]} ${current.getDate()}, ${current.getFullYear()}`;\n  \n  const handlerDelete = () =>{\n    const updated = plans.filter(plan => plan.id !== id);\n    setPlans(updated);\n  }\n\n  const handlerDone = () =>{\n    console.log('done')\n    const adderDo = plans.filter(plan => plan.id === id);\n    const newDo = {\n      id: maxIdDo + 1,\n      alreadyDo: adderDo[0].plan,\n      doneAt: currentTime\n    };\n    setAlreadyDo([...alreadyDo, newDo]);\n    handlerDelete();\n  }\n\n  return <div className='list-plan'>\n    <p>{plan} <b>on {willOn}</b></p>\n    <p className='created-at'>Created At: {createdAt}</p>\n    <button className='btn-all' onClick={() => handlerDone() }>Done</button>\n    <button className='btn-all' onClick={() => handlerDelete()}>Delete</button>\n  </div>\n}\n\nconst PlanList = ({plans, setPlans, alreadyDo, setAlreadyDo}) => {\n  return plans.map( plan => {\n    return <Plan createdAt={plan.createdAt} willOn={plan.willOn} plan={plan.plan} id={plan.id} plans={plans} setPlans={setPlans} alreadyDo={alreadyDo} setAlreadyDo={setAlreadyDo} />\n  })\n}\n\nconst HeaderDo = () =>{\n  return <div className='header-do'>\n    <h3>Already Do</h3>\n  </div>\n}\n\nconst AlreadyDo = ({doneAt, alreadyDos, id, alreadyDo, setAlreadyDo}) => {\n  const handlerDeldo = () =>{\n    const updatedDo = alreadyDo.filter(already => already.id !== id);\n    setAlreadyDo(updatedDo);\n  }\n\n  return <div>\n    <p> {alreadyDos} <b>Done At {doneAt}</b></p>\n    <button className='btn-all' onClick={()=> handlerDeldo() } >Delete</button>\n  </div>\n}\n\nconst AlreadyDoList = ({alreadyDo, setAlreadyDo}) =>{\n  return alreadyDo.map(already => {\n    return <AlreadyDo doneAt={already.doneAt} alreadyDos = {already.alreadyDo} id={already.id} alreadyDo={alreadyDo} setAlreadyDo={setAlreadyDo} />\n  })\n}\n\nconst TaskApp = () =>{\n  const [plans, setPlans] = useState(dataPlans);\n  const [alreadyDo, setAlreadyDo] = useState(dataDo);\n\n  console.log('plans')\n  console.log(...plans);\n  console.log('alreadyDo');\n  console.log(...alreadyDo);\n  return <div className='wrapper'>\n    <HeaderUtama />\n    <PlanAdder plans={plans} setPlans={setPlans} />\n    <div className='plan'>\n      <PlanHeader plans={plans} />\n      <PlanList plans={plans} setPlans={setPlans} alreadyDo={alreadyDo} setAlreadyDo={setAlreadyDo} />\n    </div>\n    <div className='do'>\n      <HeaderDo />\n      <AlreadyDoList alreadyDo={alreadyDo} setAlreadyDo={setAlreadyDo} />  \n    </div>\n  </div>\n}\n\nconst App = () => {\n  return <>\n    <TaskApp />\n  </>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}